# bot.py - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞
import os
import requests
import logging
from logging.handlers import RotatingFileHandler
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import asyncio
from datetime import datetime, timedelta
from utils import markdown_to_html, smart_split_message
from database import Database

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('logs'):
        os.makedirs('logs')
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = logging.Formatter(
        '[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ (–≤—Å–µ –ª–æ–≥–∏)
    file_handler = RotatingFileHandler(
        'logs/bot.log',
        maxBytes=10*1024*1024,  # 10MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(log_format)
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
    error_handler = RotatingFileHandler(
        'logs/errors.log',
        maxBytes=10*1024*1024,
        backupCount=5,
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(log_format)
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(log_format)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    logger.addHandler(file_handler)
    logger.addHandler(error_handler)
    logger.addHandler(console_handler)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç aiogram
    logging.getLogger('aiogram').setLevel(logging.WARNING)
    
    return logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = setup_logging()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞
COOLDOWN_SECONDS = 7 
MAX_MESSAGE_LENGTH = 4096 
FREE_DAILY_LIMIT = os.getenv("FREE_DAILY_LIMIT")
PREMIUM_DAILY_LIMIT = os.getenv("PREMIUM_DAILY_LIMIT")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY_GPT")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))


logger.info("="*50)
logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
logger.info(f"Telegram Token: {'‚úì' if TELEGRAM_TOKEN else '‚úó'}")
logger.info(f"OpenRouter API Key: {'‚úì' if OPENROUTER_API_KEY else '‚úó'}")
logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_IDS)}")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
db = Database()

API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "google/gemini-2.5-flash-lite-preview-09-2025"

# –¶–µ–Ω—ã –∑–∞ —Ç–æ–∫–µ–Ω—ã
INPUT_TOKEN_PRICE = 0.10 / 1_000_000
OUTPUT_TOKEN_PRICE = 0.40 / 1_000_000

# –õ–∏–º–∏—Ç—ã –∏ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ (–≤ Telegram Stars)
FREE_DAILY_LIMIT = 10
SUBSCRIPTION_PRICES = {
    "week": {"price": 25, "days": 7, "title": "–ù–µ–¥–µ–ª—è"},
    "month": {"price": 50, "days": 30, "title": "–ú–µ—Å—è—Ü"},
    "year": {"price": 75, "days": 60, "title": "2 –ú–µ—Å—è—Ü–∞"}
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_broadcast = State()

def calculate_cost(input_tokens: int, output_tokens: int) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞"""
    return (input_tokens * INPUT_TOKEN_PRICE) + (output_tokens * OUTPUT_TOKEN_PRICE)

def get_adaptive_max_tokens(history_length: int) -> int:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ max_tokens"""
    if history_length < 5:
        return 2000
    elif history_length < 15:
        return 1500
    elif history_length < 30:
        return 1000
    else:
        return 800

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS

def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = [
        [InlineKeyboardButton(
            text=f"‚≠êÔ∏è {SUBSCRIPTION_PRICES['week']['title']} - {SUBSCRIPTION_PRICES['week']['price']} Stars",
            callback_data="subscribe_week"
        )],
        [InlineKeyboardButton(
            text=f"üåü {SUBSCRIPTION_PRICES['month']['title']} - {SUBSCRIPTION_PRICES['month']['price']} Stars",
            callback_data="subscribe_month"
        )],
        [InlineKeyboardButton(
            text=f"‚ú® {SUBSCRIPTION_PRICES['year']['title']} - {SUBSCRIPTION_PRICES['year']['price']} Stars",
            callback_data="subscribe_year"
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        it_new_user = not(db.check_user(user_id))
        if (it_new_user):
            logging.info(f"Add new user: {user_id}")
            username = message.from_user.username or "–ù–µ—Ç username"
            full_name = message.from_user.full_name

            db.add_user(user_id, username, full_name)
            
        db.clear_history(user_id)
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_info = db.get_subscription_info(user_id)
        has_subscription = subscription_info['is_active']
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
            [InlineKeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription_info")]
        ])
        
        welcome_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n"
            "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ–º–æ–≥—É!\n\n"
        )
        remaining = db.get_remaining_requests(user_id)
        if has_subscription:
            
            welcome_text += (
                f"‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription_info['expires_at']}\n"
                f"üíé –£ –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ: {remaining} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è!"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–æ {subscription_info['expires_at']}")
        else:
            welcome_text += (
                f"üîç –£ –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ: {remaining} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è\n"
                "üíé –ö—É–ø–∏—Ç–µ <b>–ø–æ–¥–ø–∏—Å–∫—É</b> –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç {remaining}/{FREE_DAILY_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        await message.answer(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("stats"))
async def stats_command(message: Message, user_id: int = None):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if (user_id == None):
        user_id = message.from_user.id
    logger.info(f'stat {user_id}')
    stats = db.get_user_stats(user_id)
    subscription = db.get_subscription_info(user_id)
    
    if stats:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if subscription['is_active'] else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
        expires = subscription['expires_at'] if subscription['is_active'] else "‚Äî"
        
        text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"‚îú ID: <code>{user_id}</code>\n"
            f"‚îú –ò–º—è: {stats['full_name']}\n"
            f"‚îî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['registration_date']}\n\n"
            f"üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n"
            f"‚îú –°—Ç–∞—Ç—É—Å: {status}\n"
            f"‚îî –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}\n\n"
            f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚îú –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
            f"‚îú –°–µ–≥–æ–¥–Ω—è: {stats['today_requests']}/{FREE_DAILY_LIMIT if not subscription['is_active'] else PREMIUM_DAILY_LIMIT}\n"
            f"‚îî –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {stats['last_activity']}\n\n"
            
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∑–∞—Ç—Ä–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if user_id in ADMIN_IDS:
            text += (
                f"üî§ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:</b>\n"
                f"‚îú –í—Ö–æ–¥–Ω—ã–µ: {stats['total_input_tokens']:,}\n"
                f"‚îú –í—ã—Ö–æ–¥–Ω—ã–µ: {stats['total_output_tokens']:,}\n"
                f"‚îî –í—Å–µ–≥–æ: {stats['total_input_tokens'] + stats['total_output_tokens']:,}\n\n"
                f"üí∞ <b>–ó–∞—Ç—Ä–∞—Ç—ã:</b> ${stats['total_cost']:.6f}\n"
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, parse_mode=ParseMode.HTML)
        
@dp.message(Command("subscribe"))
async def subscribe_command(message: Message, user_id: int = None):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    if (user_id == None):
        user_id = message.from_user.id
    logger.info(f"sub {user_id}")
    subscription = db.get_subscription_info(user_id)
    
    if subscription['is_active']:
        await message.answer(
            f"‚úÖ <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription['expires_at']}\n"
            f"üöÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:</b>\n\n"
            "‚≠êÔ∏è <b>–ù–µ–¥–µ–ª—è</b> ‚Äî 25 Stars\n"
            "‚îî +100 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –¥–æ—Å—Ç—É–ø –∫ –ü—Ä–µ–º–∏—É–º –ò–ò-–±–æ—Ç–∞–º –Ω–∞ 7 –¥–Ω–µ–π\n\n"
            "üåü <b>–ú–µ—Å—è—Ü</b> ‚Äî 50 Stars\n"
            "‚îî +100 –∑–∞–ø—Ä–æ—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏ –¥–æ—Å—Ç—É–ø –∫ –ü—Ä–µ–º–∏—É–º –ò–ò-–±–æ—Ç–∞–º –Ω–∞ 30 –¥–Ω–µ–π\n\n"
            "‚ú® <b>2 –ú–µ—Å—è—Ü–∞</b> ‚Äî 75 Stars\n"
            "‚îî +100 –∑–∞–ø—Ä–æ—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏ –¥–æ—Å—Ç—É–ø –∫ –ü—Ä–µ–º–∏—É–º –ò–ò-–±–æ—Ç–∞–º –Ω–∞ 60 –¥–Ω–µ–π\n"
            "‚îî –í—ã–≥–æ–¥–∞ 34%!\n\n"
            "‚ÑπÔ∏è <i>1 Star ‚âà 1.79‚ÇΩ</i>\n"
            "üí∞ <b>–ö—É–ø–∏—Ç–µ Stars:</b> @PremiumBot",
            reply_markup=get_subscription_keyboard(),
            parse_mode=ParseMode.HTML
        )

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_general")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="admin_finance")],
        [InlineKeyboardButton(text="üîù –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_top")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")]
    ])
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(F.data == "my_stats")
async def my_stats_callback(callback: types.CallbackQuery):
    await stats_command(callback.message, callback.from_user.id)
    await callback.answer()

@dp.callback_query(F.data == "subscription_info" or F.data == "subscribe")
async def subscription_info_callback(callback: types.CallbackQuery):
    await subscribe_command(callback.message, callback.from_user.id)
    await callback.answer()

@dp.callback_query(F.data.startswith("subscribe_"))
async def subscribe_callback(callback: types.CallbackQuery):
    period = callback.data.split("_")[1]
    price_info = SUBSCRIPTION_PRICES[period]
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
    prices = [LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {price_info['title']}", amount=price_info['price'])]
    
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {price_info['title']}",
        description=f"+100 –∑–∞–ø—Ä–æ—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –Ω–∞ {price_info['days']} –¥–Ω–µ–π",
        payload=f"{period}_{callback.from_user.id}",
        currency="XTR",  # XTR = Telegram Stars
        prices=prices
    )
    await callback.answer()

@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payload = message.successful_payment.invoice_payload
        period, user_id = payload.split("_")
        user_id = int(user_id)
        
        days = SUBSCRIPTION_PRICES[period]['days']
        price = SUBSCRIPTION_PRICES[period]['price']
        
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {price} Stars –∑–∞ {days} –¥–Ω–µ–π ({period})")
        
        db.add_subscription(user_id, days, price)
        
        await message.answer(
            f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"‚≠êÔ∏è –°–ø–∏—Å–∞–Ω–æ: {price} Stars\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π\n"
            f"üöÄ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å +100 –∑–∞–ø—Ä–æ—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!",
            parse_mode=ParseMode.HTML
        )
        
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@dp.callback_query(F.data == "admin_general")
async def admin_general_callback(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    stats = db.get_general_stats()
    
    await callback.message.answer(
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"‚îú –í—Å–µ–≥–æ: {stats['total_users']}\n"
        f"‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_today']}\n"
        f"‚îú –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_week']}\n"
        f"‚îî –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['with_subscription']}\n\n"
        f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
        f"‚îú –í—Å–µ–≥–æ: {stats['total_messages']:,}\n"
        f"‚îî –°–µ–≥–æ–¥–Ω—è: {stats['today_messages']:,}\n\n"
        f"üî§ <b>–¢–æ–∫–µ–Ω—ã:</b>\n"
        f"‚îú –í—Ö–æ–¥–Ω—ã–µ: {stats['total_input_tokens']:,}\n"
        f"‚îú –í—ã—Ö–æ–¥–Ω—ã–µ: {stats['total_output_tokens']:,}\n"
        f"‚îî –í—Å–µ–≥–æ: {stats['total_input_tokens'] + stats['total_output_tokens']:,}\n\n"
        f"üí∞ <b>–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ API:</b> ${stats['total_cost']:.4f}",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    recent_users = db.get_recent_users(limit=10)
    
    message_text = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for i, user in enumerate(recent_users, 1):
        sub_status = "üíé" if user['has_subscription'] else "üÜì"
        message_text += (
            f"{i}. {sub_status} @{user['username']}\n"
            f"   ‚îî {user['full_name']}\n"
            f"   ‚îî –°–æ–æ–±—â–µ–Ω–∏–π: {user['message_count']} | –†–µ–≥: {user['registration_date']}\n\n"
        )
    
    await callback.message.answer(message_text, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "admin_finance")
async def admin_finance_callback(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    finance = db.get_finance_stats()
    
    await callback.message.answer(
        f"üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üìà <b>–î–æ—Ö–æ–¥ –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n"
        f"‚îú –í—Å–µ–≥–æ: {finance['total_revenue']}‚ÇΩ\n"
        f"‚îú –ó–∞ –º–µ—Å—è—Ü: {finance['month_revenue']}‚ÇΩ\n"
        f"‚îî –ó–∞ –Ω–µ–¥–µ–ª—é: {finance['week_revenue']}‚ÇΩ\n\n"
        f"üí∏ <b>–†–∞—Å—Ö–æ–¥—ã –Ω–∞ API:</b>\n"
        f"‚îú –í—Å–µ–≥–æ: ${finance['total_api_cost']:.4f}\n"
        f"‚îú –ó–∞ –º–µ—Å—è—Ü: ${finance['month_api_cost']:.4f}\n"
        f"‚îî –ó–∞ –Ω–µ–¥–µ–ª—é: ${finance['week_api_cost']:.4f}\n\n"
        f"üìä <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        f"‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: {finance['active_subscriptions']}\n"
        f"‚îî –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {finance['total_subscriptions']}",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_top")
async def admin_top_callback(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    top_users = db.get_top_users(limit=10)
    
    message_text = "üîù <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for i, user in enumerate(top_users, 1):
        medal = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else f"{i}."
        message_text += (
            f"{medal} @{user['username']}\n"
            f"   ‚îî {user['full_name']}\n"
            f"   ‚îî –°–æ–æ–±—â–µ–Ω–∏–π: {user['message_count']} | –ó–∞—Ç—Ä–∞—Ç—ã: ${user['total_cost']:.4f}\n\n"
        )
    
    await callback.message.answer(message_text, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.answer("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(AdminStates.waiting_broadcast)
    await callback.answer()

@dp.message(AdminStates.waiting_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    users = db.get_all_user_ids()
    success = 0
    failed = 0
    
    status_msg = await message.answer("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user_id in users:
        try:
            await bot.send_message(user_id, message.text, parse_mode=ParseMode.HTML)
            success += 1
            await asyncio.sleep(0.05)
        except Exception:
            failed += 1
    
    await status_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"–û—à–∏–±–æ–∫: {failed}"
    )
    await state.clear()

def split_message(text):
    return [text[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(text), MAX_MESSAGE_LENGTH)]

@dp.message()
async def chat_handler(message: Message):
    user_id = message.from_user.id
    message_text = message.text[:100] + "..." if len(message.text) > 100 else message.text

    it_new_user = not(db.check_user(user_id))
    if it_new_user:
        logging.info(f"Add new user: {user_id} from message")
        username = message.from_user.username or "–ù–µ—Ç username"
        full_name = message.from_user.full_name
        
        db.add_user(user_id, username, full_name)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        subscription = db.get_subscription_info(user_id)

        is_premium = subscription and subscription.get('is_active', False)
        daily_limit = PREMIUM_DAILY_LIMIT if is_premium else FREE_DAILY_LIMIT
        if not is_premium:
            remaining = db.get_remaining_requests(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}/{daily_limit}")
            
            if remaining <= 0:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                await message.answer(
                    "‚ö†Ô∏è <b>–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!</b>\n\n"
                    "üíé –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤.:",
                    reply_markup=get_subscription_keyboard(),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
            delay_seconds = 0
             
            time_dict = db.get_user_last_act(user_id)
            last_time_str = time_dict.get('last_activity')
            current_time_str  = time_dict.get('current_time')
            if last_time_str:
                last_time = datetime.strptime(last_time_str, "%Y-%m-%d %H:%M:%S")
                current_time = datetime.strptime(current_time_str, "%Y-%m-%d %H:%M:%S")
                time_since_last = current_time - last_time
                min_interval = timedelta(seconds=COOLDOWN_SECONDS)

                if time_since_last < min_interval:
                    remaining_time = min_interval - time_since_last
                    delay_seconds = int(remaining_time.total_seconds()) + 1
                    logging.info(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å. "
                        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {last_time}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}, "
                        f"–ø—Ä–æ—à–ª–æ: {time_since_last}, –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–∫—É–Ω–¥: {delay_seconds}"
                    )
                else:
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {time_since_last}")
            else:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            if it_new_user:
                pass
            elif delay_seconds > 0:
                await message.answer(
                    f"‚è≥ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ <b>{delay_seconds}</b> —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ üíé",
                    parse_mode=ParseMode.HTML
                )
            #elif delay_info.get('was_delayed', False): # –ó–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å    await message.answer(        "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å!",        parse_mode=ParseMode.HTML    )
                return
        else:
            remaining = db.get_remaining_requests(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}/{daily_limit}")
            
            if remaining <= 0:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                await message.answer(
                    f"‚ö†Ô∏è <b>–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!</b>\n\n"
                    f"üîÑ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>–¥–µ–Ω—å</b>.\n\n",
                    parse_mode=ParseMode.HTML
                )
                return
        await bot.send_chat_action(message.chat.id, "typing")
        await asyncio.sleep(3)
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = db.get_history(user_id)
        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        messages = [
            {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: **–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, `–∫–æ–¥`, ```–±–ª–æ–∫–∏ –∫–æ–¥–∞```."}
        ]
        
        for msg in history:
            messages.append({"role": msg['role'], "content": msg['content']})
        
        messages.append({"role": "user", "content": message.text})
        
        max_tokens = get_adaptive_max_tokens(len(history))
        logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è max_tokens: {max_tokens}")
        
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": MODEL,
            "messages": messages,
            "max_tokens": max_tokens
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        data = response.json()
        
        answer = data["choices"][0]["message"]["content"]
        
        usage = data.get("usage", {})
        input_tokens = usage.get("prompt_tokens", 0)
        output_tokens = usage.get("completion_tokens", 0)
        cost = calculate_cost(input_tokens, output_tokens)
        
        logger.info(
            f"–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. "
            f"–¢–æ–∫–µ–Ω—ã: {input_tokens} –≤—Ö–æ–¥, {output_tokens} –≤—ã—Ö–æ–¥. "
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.6f}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.add_message(user_id, "user", message.text)
        db.add_message(user_id, "assistant", answer)
        db.update_stats(user_id, input_tokens, output_tokens, cost)
        
        formatted_answer = markdown_to_html(answer)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —É–º–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        message_parts = smart_split_message(formatted_answer, max_length=4096)

        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
        if len(message_parts) > 1:
            for i, part in enumerate(message_parts, 1):
                await message.answer(part, parse_mode=ParseMode.HTML)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {i}/{len(message_parts)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            await message.answer(formatted_answer, parse_mode=ParseMode.HTML)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        

    except requests.exceptions.Timeout:
        logger.error(f"Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer("‚è≥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ.")

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç—Ä—É–¥–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ chat_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")



async def main():
    logger.info("="*50)
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info(f"–ú–æ–¥–µ–ª—å: {MODEL}")
    logger.info(f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç: {FREE_DAILY_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å")
    logger.info("="*50)
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.critical(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)